buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'maven-publish'
    id 'eclipse'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

// Modify these variables in gradle.properties
group = "${groupbase}.${modid}"
version = "${minecraft_version}-${mod_version}"

java {
    archivesBaseName = modid
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("Building ${group} version ${project.version}")

minecraft {
    // Mappings (official or parchment) is a matter of preference. Parchment does map some method parameters though
    // while keeping Class-/Method-/Fieldnames same as official.
    // mappings channel: "official", version: "${minecraft_version}"
    // https://ldtteam.jfrog.io/ui/native/parchmentmc-public/org/parchmentmc/data/parchment-1.18.2/

    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    // Uncomment if you intend to use an access transformer
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args '--debug', '--stacktrace', '--scan'
            property 'forge.logging.markers', "${forge_logging_markers}"
            property 'forge.logging.console.level', "${forge_logging_console_level}"

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--debug', '--stacktrace', '--scan'
            property 'forge.logging.markers', "${forge_logging_markers}"
            property 'forge.logging.console.level', "${forge_logging_console_level}"

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', "${forge_logging_markers}"
            property 'forge.logging.console.level', "${forge_logging_console_level}"

            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing',
                    file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.manaandartifice.com/releases/1.19.2/' }
    maven { url 'https://maven.theillusivec4.top/' }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    mavenLocal()
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Required dependencies; curios and Geckolib
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")
    compileOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19:3.1.40')

    // M&A and its API
    // compileOnly "com.mithion:mna:${mna_version}:api" //api, compilation only
    implementation fg.deobf("com.mithion:mna-forge-1.19.2:${mna_version}") //mod itself, deobf for runtime
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                'Specification-Title'     : modid,
                'Specification-Vendor'    : author,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : author,
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ'),
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}